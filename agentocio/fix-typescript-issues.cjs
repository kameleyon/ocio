/**
 * Fix TypeScript Issues Script
 * 
 * This script helps resolve TypeScript compilation issues, particularly with
 * Map iterators and downlevelIteration.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('OptimusCode API - TypeScript Issue Fixer');
console.log('=========================================');

// 1. Check if rate-limiter.ts exists in the build output directory and remove it
const buildDir = path.join(__dirname, 'dist', 'api', 'utils');
const ratelimiterBuildPath = path.join(buildDir, 'rate-limiter.js');
if (fs.existsSync(ratelimiterBuildPath)) {
  console.log('Removing problematic rate-limiter.js from build directory...');
  fs.unlinkSync(ratelimiterBuildPath);
  console.log('Successfully removed rate-limiter.js');
}

// 2. Create a build directory if it doesn't exist
if (!fs.existsSync(buildDir)) {
  console.log('Creating build directory structure...');
  fs.mkdirSync(buildDir, { recursive: true });
  console.log('Build directory created.');
}

// 3. Write a fresh version of rate-limiter.js to the build directory
console.log('Creating clean rate-limiter.js in the build directory...');
const safeRateLimiterContent = `
// This is a compiled version of safe-rate-limiter.ts
// Generated by fix-typescript-issues.cjs
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.rateLimiter = void 0;

// Direct import from safe-rate-limiter
const safe_rate_limiter_js_1 = require("./safe-rate-limiter.js");
Object.defineProperty(exports, "rateLimiter", { enumerable: true, get: function () { return safe_rate_limiter_js_1.rateLimiter; } });
`;

fs.writeFileSync(ratelimiterBuildPath, safeRateLimiterContent);
console.log('Successfully created clean rate-limiter.js');

// 4. Update tsconfig to ensure downlevelIteration is enabled
console.log('Checking TypeScript configuration...');
const tsconfigPath = path.join(__dirname, 'tsconfig.json');
const apiTsconfigPath = path.join(__dirname, 'src', 'api', 'tsconfig.json');

let tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
let apiTsconfig = JSON.parse(fs.readFileSync(apiTsconfigPath, 'utf8'));

// Ensure downlevelIteration is enabled in root tsconfig
if (!tsconfig.compilerOptions.downlevelIteration) {
  console.log('Enabling downlevelIteration in root tsconfig.json');
  tsconfig.compilerOptions.downlevelIteration = true;
  fs.writeFileSync(tsconfigPath, JSON.stringify(tsconfig, null, 2));
}

// Ensure downlevelIteration is enabled in API tsconfig
if (!apiTsconfig.compilerOptions.downlevelIteration) {
  console.log('Enabling downlevelIteration in API tsconfig.json');
  apiTsconfig.compilerOptions.downlevelIteration = true;
  fs.writeFileSync(apiTsconfigPath, JSON.stringify(apiTsconfig, null, 2));
}

console.log('TypeScript configuration updated.');

// 5. Create src/api/utils directory if it doesn't exist
const srcUtilsDir = path.join(__dirname, 'src', 'api', 'utils');
if (!fs.existsSync(srcUtilsDir)) {
  console.log('Creating src/api/utils directory...');
  fs.mkdirSync(srcUtilsDir, { recursive: true });
  console.log('src/api/utils directory created.');
}

// 6. Update rate-limiter.ts to a clean version
console.log('Updating rate-limiter.ts to a clean re-export...');
const ratelimiterSrcPath = path.join(srcUtilsDir, 'rate-limiter.ts');
const cleanContent = `// Clean re-export to avoid TypeScript issues
export * from './safe-rate-limiter.js';`;
fs.writeFileSync(ratelimiterSrcPath, cleanContent);
console.log('Successfully updated rate-limiter.ts');

console.log('\nAll TypeScript issues have been fixed. You can now run:');
console.log('npm run build');
console.log('\nTo test the API wrapper run:');
console.log('npm run start:all -- --with-api');